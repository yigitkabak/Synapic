<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Arama Sonuçları - Synapic Search</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/js/all.min.js" integrity="sha512-EVv84Mr4kqVGRNSgIGL/F/aIDqb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #121212;
            --bg-secondary: #1e1e1e;
            --bg-tertiary: #252525;
            --text-primary: #ffffff;
            --text-secondary: rgba(255, 255, 255, 0.7);
            --accent: #7289fd; /* Discord-like purple */
            --accent-hover: #5a6fd8;
            --accent-glow: rgba(114, 137, 253, 0.4);
            --button-bg: rgba(255, 255, 255, 0.08);
            --button-hover: rgba(255, 255, 255, 0.12);
            --button-active: rgba(114, 137, 253, 0.2);
            --border-color: rgba(255, 255, 255, 0.1);
            --shadow: 0 8px 30px rgba(0, 0, 0, 0.2);
            --blur-bg: rgba(18, 18, 18, 0.8);
            --logo-filter: invert(100%) grayscale(100%); /* For dark mode visibility */
        }

        .light-theme {
            --bg-primary: #f5f7fa;
            --bg-secondary: #ffffff;
            --bg-tertiary: #eaeef3;
            --text-primary: #1f2937;
            --text-secondary: rgba(31, 41, 55, 0.7);
            --accent: #6366f1; /* Indigo */
            --accent-hover: #4f46e5;
            --accent-glow: rgba(99, 102, 241, 0.3);
            --button-bg: #eaeef3;
            --button-hover: #dfe3eb;
            --button-active: rgba(99, 102, 241, 0.2);
            --border-color: rgba(0, 0, 0, 0.1);
            --shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
            --blur-bg: rgba(245, 247, 250, 0.8);
            --logo-filter: none; /* No filter for light mode */
        }

        body {
            background-color: var(--bg-primary);
            color: var(--text-primary);
            font-family: 'Inter', sans-serif;
            background-image: radial-gradient(circle at top right, rgba(114, 137, 253, 0.08), transparent 40%),
                            radial-gradient(circle at bottom left, rgba(114, 137, 253, 0.05), transparent 30%);
            min-height: 100vh;
        }

        .light-theme body {
            background-image: radial-gradient(circle at top right, rgba(99, 102, 241, 0.05), transparent 40%),
                            radial-gradient(circle at bottom left, rgba(99, 102, 241, 0.03), transparent 30%);
        }

        /* Card Styling (Used for Web, News, Video) */
        .result-card {
            background: var(--bg-secondary);
            border-radius: 12px;
            box-shadow: var(--shadow);
            transition: transform 0.2s ease, background-color 0.2s ease;
            border: 1px solid var(--border-color);
            overflow: hidden; /* Ensures content respects border radius */
        }
        .result-card:hover {
             background: var(--bg-tertiary);
             transform: translateY(-2px);
        }

        .image-result {
            border: 1px solid var(--border-color);
            transition: all 0.2s ease;
            background: var(--bg-secondary);
            border-radius: 8px; /* Slightly different radius for images */
        }
        .image-result:hover {
            transform: scale(1.03);
            border-color: var(--accent);
        }

         /* Autocomplete Styles */
        #searchFormContainer {
            position: relative; /* Needed for absolute positioning of suggestions */
        }

        .search-box-container {
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow);
            transition: border-color 0.2s ease;
            z-index: 20; /* Ensure search box is above suggestions */
            position: relative; /* Needed for z-index stacking */
        }
        .search-box-container:focus-within {
            border-color: var(--accent);
        }

        #suggestionsList {
            position: absolute;
            top: 100%; /* Position directly below the search box */
            left: 0;
            right: 0;
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-top: none;
            border-radius: 0 0 12px 12px;
            box-shadow: var(--shadow);
            z-index: 10; /* Below search box but above other content */
            overflow-y: auto;
            max-height: 250px; /* Limit height and add scroll */
            list-style: none;
            padding: 0;
            margin: 0 auto; /* Center with search box */
            max-width: calc(100% - 2rem); /* Match max width of search box container, considering padding */
            width: max-content; /* Adjust width to content up to max-width */
             min-width: 300px; /* Minimum width */
        }

         @media (min-width: 640px) {
            #suggestionsList {
                 max-width: calc(48rem - 2rem); /* Match max width of search box container (max-w-3xl is 48rem), considering padding */
                 min-width: 400px;
            }
         }
         @media (min-width: 768px) {
             #suggestionsList {
                 max-width: calc(48rem - 2rem); /* Max-w-3xl */
             }
         }


        #suggestionsList li {
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 1px solid var(--border-color);
            color: var(--text-primary);
            transition: background-color 0.2s;
        }
        #suggestionsList li:last-child {
            border-bottom: none;
        }
        #suggestionsList li:hover,
        #suggestionsList li.selected {
            background-color: var(--button-hover);
        }


        .active-tab {
            background: var(--accent);
            color: white !important; /* Ensure text is white on active tab */
            border-color: var(--accent) !important;
        }

        .pagination a, .pagination span {
            padding: 8px 16px;
            margin: 0 5px;
            border-radius: 8px;
            text-decoration: none;
            color: var(--text-secondary);
            background-color: var(--button-bg);
            border: 1px solid var(--border-color);
            transition: background-color 0.2s, color 0.2s;
            font-size: 0.875rem;
        }
        .pagination a:hover {
            background-color: var(--button-hover);
            color: var(--text-primary);
        }
        .pagination .current {
            background-color: var(--accent);
            color: white;
            border-color: var(--accent);
            font-weight: 600;
        }

        .modal {
            background: var(--blur-bg);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            display: none; /* Initially hidden */
            position: fixed;
            inset: 0;
            z-index: 50;
        }

        /* Custom Logo Style */
        .synapic-logo {
          font-size: 28px; /* Adjusted size */
          font-weight: 800;
          letter-spacing: -2px;
          text-shadow: 0 2px 5px rgba(0,0,0,0.15);
        }
        .synapic-logo span:nth-child(1) { color: #4285f4; }
        .synapic-logo span:nth-child(2) { color: #ea4335; }
        .synapic-logo span:nth-child(3) { color: #fbbc05; }
        .synapic-logo span:nth-child(4) { color: #4285f4; }
        .synapic-logo span:nth-child(5) { color: #34a853; }
        .synapic-logo span:nth-child(6) { color: #ea4335; }
        .synapic-logo span:nth-child(7) { color: #4285f4; }

        /* Prose styles for Wiki */
        .prose { color: var(--text-secondary); }
        .prose h1, .prose h2, .prose h3, .prose h4, .prose strong { color: var(--text-primary); }
        .prose a { color: var(--accent); }
        .prose a:hover { color: var(--accent-hover); }
        .light-theme .prose { color: var(--text-secondary); }
        .light-theme .prose h1, .light-theme .prose h2, .light-theme .prose h3, .light-theme .prose h4, .light-theme .prose strong { color: var(--text-primary); }
        .light-theme .prose a { color: var(--accent); }
        .light-theme .prose a:hover { color: var(--accent-hover); }

        /* Ensure icons inside buttons inherit color */
        button i { color: inherit; }

        .external-logos img {
            height: 32px; /* Adjust size as needed */
            filter: var(--logo-filter);
            transition: transform 0.2s ease;
        }
         .external-logos a:hover img {
            transform: scale(1.1);
         }


        @media (max-width: 640px) {
            .synapic-logo { font-size: 24px; letter-spacing: -1.5px; }
            .search-input { font-size: 16px; padding: 12px 16px; }
            .pagination a, .pagination span { padding: 6px 12px; margin: 0 3px; font-size: 0.75rem; }
             .external-logos img { height: 24px; }
        }
    </style>
</head>
<body class="min-h-screen">
    <nav class="sticky top-0 bg-[var(--bg-primary)] border-b border-[var(--border-color)] backdrop-blur-lg z-40">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <a href="/" class="flex items-center space-x-2">
                  <div class="logo-container">
                      <div class="synapic-logo">
                        <span>S</span><span>y</span><span>n</span><span>a</span><span>p</span><span>i</span><span>c</span>
                      </div>
                  </div>
                </a>
                <div class="flex items-center space-x-2 sm:space-x-4">
                    <button id="themeToggle" class="p-2 rounded-full hover:bg-[var(--button-bg)] transition-colors text-[var(--accent)] text-lg">
                        <i class="fa-solid fa-moon"></i> </button>
                </div>
            </div>
        </div>
    </nav>

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
        <form method="GET" action="/search" class="mb-6 sm:mb-8">
            <div id="searchFormContainer" class="max-w-3xl mx-auto relative"> <div class="search-box-container rounded-full p-1 sm:p-2">
                    <div class="flex items-center">
                        <input type="text"
                               name="query"
                               id="queryInput" value="<%= query %>"
                               placeholder="Synapic'ta ara..."
                               class="search-input w-full bg-transparent outline-none px-3 sm:px-5 py-2 text-sm sm:text-base text-[var(--text-primary)] placeholder-[var(--text-secondary)]">
                        <button type="submit" class="p-2 rounded-full hover:bg-[var(--button-hover)] transition-colors mr-1">
                            <i class="fa-solid fa-search text-[var(--text-secondary)] text-base sm:text-lg"></i>
                        </button>
                    </div>
                </div>
                 <ul id="suggestionsList" class="hidden"></ul> </div>


            <div class="flex flex-wrap justify-center gap-2 sm:gap-3 mt-4 sm:mt-5">
                 <% ['web', 'image', 'news', 'wiki', 'video'].forEach(tab => { %>
                    <%
                       const tabNames = {
                           web: 'Web',
                           image: 'Görseller',
                           news: 'Haberler',
                           wiki: 'Wiki',
                           video: 'Videolar'
                       };
                    %>
                    <button type="submit"
                            name="type"
                            value="<%= tab %>"
                            class="px-3 py-1.5 sm:px-4 sm:py-2 rounded-full border text-xs sm:text-sm font-medium transition-all
                                   <%= type === tab ? 'active-tab' : 'border-[var(--border-color)] text-[var(--text-secondary)] hover:border-[var(--accent)] hover:text-[var(--accent)] bg-[var(--button-bg)] hover:bg-[var(--button-hover)]' %>">
                       <i class="fa-solid <%= {web: 'fa-globe', image: 'fa-image', news: 'fa-newspaper', wiki: 'fa-wikipedia-w', video: 'fa-video'}[tab] %> mr-1.5 opacity-80"></i>
                        <%= tabNames[tab] %>
                    </button>
                <% }) %>
            </div>
        </form>


        <div class="space-y-4 sm:space-y-6">

            <%
                // Determine if web results were found
                const webResultsFound = results && results.length > 0;
                // Determine if news results exist and we are on the web tab with no web results
                const showNewsAsFallback = type === 'web' && !webResultsFound && newsResults && newsResults.length > 0;
            %>

            <% if (webResultsFound || showNewsAsFallback) { %>
                <% if (showNewsAsFallback) { %>
                <% } %>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-3 sm:gap-4">
                    <% // Decide which set of results to loop through %>
                    <% const resultsToDisplay = showNewsAsFallback ? newsResults : results; %>
                    <% resultsToDisplay.forEach(item => { %>
                        <div class="result-card">
                           <a href="<%= item.link || item.url %>" target="_blank" class="block p-4 sm:p-5 hover:bg-[var(--bg-tertiary)] rounded-lg">
                                <div class="flex items-start mb-1.5">
                                    <div class="flex-1">
                                        <% // Use 'news' for title if showing news fallback, otherwise use 'title' %>
                                        <h3 class="font-semibold text-[var(--accent)] text-base sm:text-lg leading-tight hover:underline"><%= item.title || item.news %></h3>
                                    </div>
                                     <% // Check for PDF link if showing original web results %>
                                     <% if (!showNewsAsFallback && (item.link || item.url || '').toLowerCase().endsWith('.pdf')) { %>
                                        <span class="ml-2 mt-0.5 px-2 py-0.5 rounded-full bg-[var(--accent)]/10 text-[var(--accent)] font-medium text-[10px] sm:text-xs inline-block border border-[var(--accent)]/20 flex-shrink-0">
                                        PDF
                                        </span>
                                    <% } %>
                                </div>
                                <% // Use 'news' as snippet if showing news fallback, otherwise use 'snippet' %>
                                <p class="text-xs sm:text-sm text-[var(--text-secondary)] mb-2 leading-relaxed"><%= item.snippet || item.news %></p>
                                <p class="text-[10px] sm:text-xs text-[var(--text-secondary)]/70 truncate"><%= item.link || item.url %></p>
                           </a>
                        </div>
                    <% }) %>
                </div>
                 <% // Show pagination only for actual web results, not news fallback %>
                 <% // Check if there are results to paginate (at least 10) %>
                 <% // The server passes 'start' which is 0-based, but pagination links use 10, 20, etc. steps %>
                 <% // Check if the current result set has 10 items (implies there might be more) %>
                 <% if (webResultsFound && results.length > 0) { %>
                    <div class="pagination flex justify-center mt-6 sm:mt-8">
                        <% // Calculate previous start (go back 10, min is 0) %>
                        <% const prevStart = Math.max(0, start - 10); %>
                        <% if (start > 0) { %>
                            <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= prevStart %>"><i class="fa-solid fa-arrow-left mr-1.5"></i>Önceki</a>
                        <% } %>
                        <% // Calculate current page number (start / 10 + 1) %>
                        <span class="current"><%= Math.floor(start / 10) + 1 %></span>
                        <% // Show next button if we got a full page of results (implying more might exist) %>
                        <% if (results.length === 10) { %>
                            <% const nextStart = start + 10; %>
                            <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= nextStart %>">Sonraki<i class="fa-solid fa-arrow-right ml-1.5"></i></a>
                        <% } %>
                    </div>
                <% } %>
            <% } %>

            <% if (type === 'image' && images && images.length > 0) { %>
                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-2 sm:gap-3">
                    <% images.forEach(img => { %>
                        <div class="image-result rounded-lg overflow-hidden cursor-pointer aspect-square"
                             onclick="openModal('<%= img.image %>')">
                            <img src="<%= img.image %>"
                                 alt="<%= img.title || 'Resim' %>"
                                 loading="lazy"
                                 class="w-full h-full object-cover transition-transform duration-200 hover:scale-105">
                        </div>
                    <% }) %>
                </div>
                 <% // Add pagination for images if needed (requires API support and server logic) %>
                 <% // Example: If image results always return 50, you might paginate based on that %>
                 <% if (type === 'image' && images.length > 0) { %>
                     <div class="pagination flex justify-center mt-6 sm:mt-8">
                         <% const prevStart = Math.max(0, start - 50); // Assuming 50 images per page %>
                         <% if (start > 0) { %>
                            <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= prevStart %>"><i class="fa-solid fa-arrow-left mr-1.5"></i>Önceki</a>
                         <% } %>
                         <span class="current"><%= Math.floor(start / 50) + 1 %></span>
                         <% if (images.length === 50) { // If we got a full page %>
                             <% const nextStart = start + 50; %>
                             <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= nextStart %>">Sonraki<i class="fa-solid fa-arrow-right ml-1.5"></i></a>
                         <% } %>
                     </div>
                 <% } %>

            <% } %>

            <% // Only show news results block if type is explicitly 'news' %>
             <% if (type === 'news' && newsResults && newsResults.length > 0) { %>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                    <% newsResults.forEach(r => { %>
                        <div class="result-card flex flex-col">
                            <a href="<%= r.link %>" target="_blank" class="block hover:bg-[var(--bg-tertiary)] rounded-lg transition-colors duration-200 flex-grow">
                                <% if (r.image) { %>
                                   <div class="aspect-video overflow-hidden">
                                       <img src="<%= r.image %>" alt="<%= r.news %>" class="w-full h-full object-cover">
                                   </div>
                                <% } %>
                                <div class="p-4 sm:p-5">
                                    <h3 class="font-semibold text-[var(--text-primary)] text-base sm:text-lg mb-1.5 hover:text-[var(--accent)] leading-tight"><%= r.news %></h3>
                                    <p class="text-[10px] sm:text-xs text-[var(--text-secondary)]/70 truncate"><%= r.link %></p>
                                    <% if (r.source) { %>
                                        <p class="text-xs text-[var(--text-secondary)] mt-2"><%= r.source %></p>
                                    <% } %>
                                </div>
                           </a>
                        </div>
                    <% }) %>
                </div>
                <% // Add pagination for news if needed (requires API support and server logic) %>
                <% if (type === 'news' && newsResults.length > 0) { %>
                     <div class="pagination flex justify-center mt-6 sm:mt-8">
                         <% const prevStart = Math.max(0, start - 10); // Assuming 10 news results per page %>
                         <% if (start > 0) { %>
                            <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= prevStart %>"><i class="fa-solid fa-arrow-left mr-1.5"></i>Önceki</a>
                         <% } %>
                         <span class="current"><%= Math.floor(start / 10) + 1 %></span>
                         <% if (newsResults.length === 10) { // If we got a full page %>
                             <% const nextStart = start + 10; %>
                             <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= nextStart %>">Sonraki<i class="fa-solid fa-arrow-right ml-1.5"></i></a>
                         <% } %>
                     </div>
                 <% } %>

            <% } %>

            <% if (type === 'wiki' && wiki) { %>
                <div class="result-card p-4 sm:p-6 max-w-3xl mx-auto border-l-4 border-[var(--accent)]">
                    <div class="flex items-center mb-3 sm:mb-4">
                        <i class="fab fa-wikipedia-w text-xl sm:text-2xl text-[var(--accent)] mr-2 sm:mr-3"></i>
                        <h1 class="text-xl sm:text-2xl font-bold text-[var(--text-primary)]"><%= wiki.title %></h1>
                    </div>
                    <% if (wiki.img) { %>
                        <img src="<%= wiki.img %>"
                             alt="<%= wiki.title %>"
                             class="w-full max-h-60 sm:max-h-72 object-cover rounded-lg mb-4 sm:mb-5 border border-[var(--border-color)]">
                    <% } %>
                    <div class="prose max-w-none text-sm sm:text-base leading-relaxed">
                        <p><%= wiki.summary %></p> </div>
                    <a href="<%= wiki.url %>"
                       target="_blank"
                       class="inline-flex items-center mt-4 sm:mt-5 text-[var(--accent)] hover:text-[var(--accent-hover)] hover:underline text-sm sm:text-base font-medium group">
                        Vikipedi'de Devamını Oku
                        <i class="fa-solid fa-arrow-right ml-1.5 transform transition-transform duration-200 group-hover:translate-x-1"></i>
                    </a>
                </div>
                <% // Wiki usually doesn't have pagination %>
            <% } %>

            <% if (type === 'video' && videos && videos.length > 0) { %>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                    <% videos.forEach(video => { %>
                        <div class="result-card flex flex-col">
                            <a href="<%= video.url %>" target="_blank" class="block hover:bg-[var(--bg-tertiary)] rounded-lg transition-colors duration-200 flex-grow">
                                <div class="video-thumbnail relative aspect-video overflow-hidden">
                                    <img src="<%= video.thumbnail %>" alt="<%= video.title %>" loading="lazy" class="w-full h-full object-cover">
                                     <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-20 opacity-0 hover:opacity-100 transition-opacity duration-200">
                                        <i class="fa-solid fa-play text-white text-3xl"></i>
                                    </div>
                                </div>
                                <div class="p-4 sm:p-5">
                                    <h3 class="font-semibold text-[var(--text-primary)] text-base sm:text-lg mb-1 hover:text-[var(--accent)] leading-tight"><%= video.title %></h3>
                                    <p class="video-source text-xs sm:text-sm text-[var(--text-secondary)]"><%= video.source %></p>
                                     </div>
                            </a>
                        </div>
                    <% }); %>
                </div>
                 <% // Add pagination for videos if needed (requires API support and server logic) %>
                 <% if (type === 'video' && videos.length > 0) { %>
                     <div class="pagination flex justify-center mt-6 sm:mt-8">
                         <% const prevStart = Math.max(0, start - 10); // Assuming 10 video results per page %>
                         <% if (start > 0) { %>
                            <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= prevStart %>"><i class="fa-solid fa-arrow-left mr-1.5"></i>Önceki</a>
                         <% } %>
                         <span class="current"><%= Math.floor(start / 10) + 1 %></span>
                         <% if (videos.length === 10) { // If we got a full page %>
                             <% const nextStart = start + 10; %>
                             <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= nextStart %>">Sonraki<i class="fa-solid fa-arrow-right ml-1.5"></i></a>
                         <% } %>
                     </div>
                 <% } %>
            <% } %>


            <%
                // Recalculate noResultsFound considering the news fallback for web searches
                // Also, ensure noResultsFound is true ONLY if there are truly no results AND no fallback was shown
                let noResultsFound = false;
                if (query) { // Only show "no results" if a query was actually made
                    if (type === 'web' && !webResultsFound && !showNewsAsFallback) noResultsFound = true; // No web, no news fallback
                    else if (type === 'image' && (!images || images.length === 0)) noResultsFound = true;
                    else if (type === 'news' && (!newsResults || newsResults.length === 0)) noResultsFound = true;
                    else if (type === 'wiki' && !wiki) noResultsFound = true;
                    else if (type === 'video' && (!videos || videos.length === 0)) noResultsFound = true;
                }
             %>
             <% if (noResultsFound) { %>
                <div class="text-center py-16 sm:py-24 text-[var(--text-secondary)]">
                    <i class="fa-solid fa-compass mb-4 text-4xl sm:text-5xl opacity-50"></i>
                    <p class="text-base sm:text-lg font-medium text-[var(--text-primary)]">"<%= query %>" için sonuç bulunamadı.</p>
                    <p class="text-sm sm:text-base mt-1 mb-6">Synapic sonuçları daha beta aşamasındadır.</p>
                    <p class="text-sm sm:text-base mt-1">Aramayı aşağıdaki motorlarda deneyebilirsiniz:</p>
                     <div class="external-logos flex justify-center items-center gap-6 mt-6">
                        <a href="https://www.google.com/search?q=<%= encodeURIComponent(query) %>" target="_blank" title="Google'da Ara">
                            <img src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png" alt="Google Logo">
                        </a>
                        <a href="https://www.bing.com/search?q=<%= encodeURIComponent(query) %>" target="_blank" title="Bing'de Ara">
                             <img src="https://beebom.com/wp-content/uploads/2020/10/Bing-new-logo-website.jpg" alt="Bing Logo">
                        </a>
                        <a href="https://duckduckgo.com/?q=<%= encodeURIComponent(query) %>" target="_blank" title="DuckDuckGo'da Ara">
                            <img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.6D4UNHopLfSKhUXJapdUhgHaEK%26pid%3DApi&f=1&ipt=c636f7bd280853c7f4bd97c384c2c785b36cb08f28b5093d7c58110cfe030c21&ipo=images" alt="DuckDuckGo Logo">
                        </a>
                    </div>
                </div>
            <% } %>

        </div>
    </main>

    <div id="imageModal" class="modal items-center justify-center" onclick="closeModalOnClickOutside(event)">
         <div class="relative max-w-[95%] sm:max-w-4xl w-auto p-2 sm:p-4" onclick="event.stopPropagation()"> <img id="modalImage" class="rounded-lg shadow-xl max-h-[75vh] sm:max-h-[85vh] mx-auto object-contain block border-2 border-[var(--bg-tertiary)]">
              <button onclick="closeModal()"
                    class="absolute top-2 right-2 sm:top-3 sm:right-3 p-2 rounded-full bg-[var(--bg-secondary)]/80 hover:bg-[var(--bg-tertiary)] text-[var(--text-primary)] transition-colors z-10 leading-none">
                <i class="fa-solid fa-xmark text-xl"></i>
            </button>
            <p id="imageUrl" class="text-center text-xs text-[var(--text-secondary)] mt-2 truncate px-4 break-all"></p>
        </div>
    </div>


    <script>
        // Theme Toggling
        const themeToggle = document.getElementById('themeToggle');
        const themeIcon = themeToggle.querySelector('i');
        // Check local storage or system preference
        let isDark = localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);

        function applyTheme(dark) {
            if (dark) {
                document.body.classList.remove('light-theme');
                themeIcon.classList.remove('fa-sun');
                themeIcon.classList.add('fa-moon');
                localStorage.setItem('theme', 'dark');
            } else {
                document.body.classList.add('light-theme');
                themeIcon.classList.remove('fa-moon');
                themeIcon.classList.add('fa-sun');
                localStorage.setItem('theme', 'light');
            }
        }

        themeToggle.addEventListener('click', () => {
            isDark = !isDark;
            applyTheme(isDark);
        });

        // Apply initial theme on load
        applyTheme(isDark);


        // Modal Functions
        const modal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        const imageUrlText = document.getElementById('imageUrl');

        function openModal(src) {
            modalImage.src = src;
            // Clean up URL for display
            imageUrlText.textContent = src.replace(/^https?:\/\//, '').split('?')[0];
            modal.style.display = 'flex'; // Use flex to center content
            document.body.style.overflow = 'hidden'; // Prevent background scroll
        }

        function closeModal() {
            modal.style.display = 'none';
            modalImage.src = ''; // Clear src to prevent showing old image briefly
            imageUrlText.textContent = '';
            document.body.style.overflow = ''; // Restore background scroll
        }

        // Close modal if clicked outside the image container
        function closeModalOnClickOutside(event) {
            if (event.target === modal) {
                closeModal();
            }
        }

        // Close modal with ESC key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.style.display === 'flex') {
                closeModal();
            }
        });


        // Autocomplete Logic
        const queryInput = document.getElementById('queryInput');
        const suggestionsList = document.getElementById('suggestionsList');
        const searchForm = queryInput.closest('form'); // Get the parent form

        let selectedSuggestionIndex = -1; // To track keyboard navigation

        // Function to fetch suggestions (replace with actual API call)
        async function fetchSuggestions(query) {
            if (query.length < 2) { // Don't fetch for very short queries
                return [];
            }

            // --- START: Replace this dummy data with your actual fetch call ---
            // This should call a backend endpoint you create that fetches suggestions
            // from Google Suggest, Bing Suggest, etc.
            console.log("Fetching suggestions for:", query);
            /*
            try {
                // Example: Fetch from a backend endpoint like '/api/suggest'
                const response = await fetch(`/api/suggest?q=${encodeURIComponent(query)}`);
                if (!response.ok) throw new Error('Network response was not ok.');
                const data = await response.json();
                // Assuming data is an array of suggestion strings or objects like [{text: '...'}, ...]
                return data.map(item => item.text || item); // Adjust based on your API response structure
            } catch (error) {
                console.error("Error fetching suggestions:", error);
                return []; // Return empty array on error
            }
            */

            // Dummy data for demonstration:
            const dummySuggestions = [
                "yapay zeka nedir",
                "yapay zeka uygulamaları",
                "yapay zeka eğitimi",
                "yapay zeka gelecek",
                "synapic search",
                "synapic nedir",
                "en son haberler",
                "türkiye gündem",
                "hava durumu istanbul"
            ];
            const filteredSuggestions = dummySuggestions.filter(s => s.toLowerCase().includes(query.toLowerCase())).slice(0, 10);
            // --- END: Replace dummy data ---

            return filteredSuggestions;
        }

        // Function to display suggestions
        function displaySuggestions(suggestions) {
            suggestionsList.innerHTML = ''; // Clear previous suggestions
            if (suggestions.length === 0) {
                suggestionsList.classList.add('hidden');
                return;
            }

            suggestions.forEach((suggestion, index) => {
                const li = document.createElement('li');
                li.textContent = suggestion;
                li.dataset.index = index; // Store index for keyboard nav
                li.addEventListener('click', () => {
                    queryInput.value = suggestion;
                    suggestionsList.classList.add('hidden');
                    searchForm.submit(); // Optional: auto-submit on click
                });
                suggestionsList.appendChild(li);
            });
            suggestionsList.classList.remove('hidden');
            selectedSuggestionIndex = -1; // Reset selection
        }

        // Handle input changes
        let debounceTimer;
        queryInput.addEventListener('input', () => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(async () => {
                const query = queryInput.value.trim();
                if (query.length > 0) {
                    const suggestions = await fetchSuggestions(query);
                    displaySuggestions(suggestions);
                } else {
                    suggestionsList.classList.add('hidden');
                }
            }, 250); // Debounce for 250ms
        });

         // Show suggestions when input is focused and has content
        queryInput.addEventListener('focus', async () => {
             const query = queryInput.value.trim();
             if (query.length > 0 && suggestionsList.children.length === 0) { // Only fetch if already typed and list is empty
                 const suggestions = await fetchSuggestions(query);
                 displaySuggestions(suggestions);
             } else if (suggestionsList.children.length > 0) { // If already has suggestions, just show
                 suggestionsList.classList.remove('hidden');
             }
         });


        // Hide suggestions when blurring, but allow time for a click
        queryInput.addEventListener('blur', () => {
            setTimeout(() => {
                suggestionsList.classList.add('hidden');
            }, 150); // Small delay
        });

        // Handle keyboard navigation
        queryInput.addEventListener('keydown', (e) => {
            const items = suggestionsList.querySelectorAll('li');
            if (items.length === 0) return;

            if (e.key === 'ArrowDown') {
                e.preventDefault(); // Prevent cursor movement
                if (selectedSuggestionIndex < items.length - 1) {
                    if (selectedSuggestionIndex >= 0) {
                        items[selectedSuggestionIndex].classList.remove('selected');
                    }
                    selectedSuggestionIndex++;
                    items[selectedSuggestionIndex].classList.add('selected');
                    items[selectedSuggestionIndex].scrollIntoView({ block: 'nearest' }); // Scroll into view
                     queryInput.value = items[selectedSuggestionIndex].textContent; // Fill input with selected suggestion
                }
            } else if (e.key === 'ArrowUp') {
                e.preventDefault(); // Prevent cursor movement
                 if (selectedSuggestionIndex > 0) {
                     if (selectedSuggestionIndex >= 0) {
                         items[selectedSuggestionIndex].classList.remove('selected');
                     }
                    selectedSuggestionIndex--;
                    items[selectedSuggestionIndex].classList.add('selected');
                    items[selectedSuggestionIndex].scrollIntoView({ block: 'nearest' }); // Scroll into view
                     queryInput.value = items[selectedSuggestionIndex].textContent; // Fill input with selected suggestion
                } else if (selectedSuggestionIndex === 0) {
                    items[selectedSuggestionIndex].classList.remove('selected');
                    selectedSuggestionIndex = -1;
                     queryInput.value = e.target.value; // Revert to original input before selection
                }
            } else if (e.key === 'Enter') {
                 // Prevent form submission if a suggestion is selected
                if (selectedSuggestionIndex > -1) {
                     e.preventDefault();
                     items[selectedSuggestionIndex].click(); // Trigger click on selected item
                 }
                 // If no suggestion is selected, the default form submission happens
            }
             // If user types after selecting, reset selection
             if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp' && e.key !== 'Enter') {
                  if (selectedSuggestionIndex > -1) {
                       items[selectedSuggestionIndex].classList.remove('selected');
                       selectedSuggestionIndex = -1;
                  }
             }
        });

    </script>
</body>
</html>
